[
  {
    "text": "Как использовать цикл while для поиска максимального числа в списке?",
    "options": [
      "Использовать встроенную функцию max() внутри цикла",
      "Сравнивать элементы через индексы с временной переменной",
      "Применить метод списка find_max()",
      "Отсортировать список и взять последний элемент"
    ],
    "correct": 1,
    "explanation": "Алгоритм: инициализируем переменную max_num, затем в цикле while сравниваем каждый элемент списка с max_num, обновляя его при нахождении большего значения.",
    "example": "numbers = [3, 1, 4, 2]\nmax_num = numbers[0]\ni = 1\nwhile i < len(numbers):\n    if numbers[i] > max_num:\n        max_num = numbers[i]\n    i += 1\nprint(max_num)  # 4"
  },
  {
    "text": "Как работают условные операторы в Python (if, elif, else)?",
    "options": [
      "Выполняют все условия подряд",
      "Проверяют условия последовательно до первого истинного",
      "Работают только с числовыми значениями",
      "Можно использовать только один if на блок кода"
    ],
    "correct": 1,
    "explanation": "Python проверяет условия if/elif последовательно. При первом истинном условии выполняется соответствующий блок, остальные пропускаются. Блок else выполняется, если все условия ложны.",
    "example": "x = 10\nif x > 10:\n    print('Больше')\nelif x < 10:\n    print('Меньше')\nelse:\n    print('Равно')  # Выведет 'Равно'"
  },
  {
    "text": "Что такое исключения в Python, и как их обрабатывать с помощью try-except?",
    "options": [
      "Ошибки синтаксиса, исправляются автоматически",
      "Специальные события, прерывающие выполнение программы",
      "Способ оптимизации кода",
      "Аналог условных операторов"
    ],
    "correct": 1,
    "explanation": "Исключения - события, возникающие при ошибках выполнения. Блок try-except позволяет перехватить исключение и обработать его, предотвращая аварийное завершение программы.",
    "example": "try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Деление на ноль!')"
  },
  {
    "text": "Как можно использовать else в блоке try-except?",
    "options": [
      "Выполняется при возникновении исключения",
      "Выполняется, если исключений не было",
      "Аналог блока finally",
      "Нельзя использовать с try-except"
    ],
    "correct": 1,
    "explanation": "Блок else после try-except выполняется только если в try не возникло исключений. Полезен для кода, который должен выполниться только при успешном выполнении try.",
    "example": "try:\n    x = 1 / 1\nexcept:\n    print('Ошибка')\nelse:\n    print('Успех')  # Выведет 'Успех'"
  },
  {
    "text": "В чем отличие между try-except и finally в Python?",
    "options": [
      "finally выполняется всегда, except - только при ошибках",
      "except выполняется всегда, finally - только при ошибках",
      "Нет различий",
      "finally используется вместо except"
    ],
    "correct": 0,
    "explanation": "Блок finally выполняется всегда, независимо от того, было исключение или нет. Обычно используется для освобождения ресурсов (закрытие файлов и т.д.).",
    "example": "try:\n    file = open('test.txt')\n    # Работа с файлом\nexcept:\n    print('Ошибка')\nfinally:\n    file.close()  # Выполнится в любом случае"
  },
  {
    "text": "Что такое raise в Python, и как его использовать для генерации исключений?",
    "options": [
      "Оператор для игнорирования ошибок",
      "Способ явного создания исключений",
      "Функция для обработки исключений",
      "Метод класса Exception"
    ],
    "correct": 1,
    "explanation": "Оператор raise позволяет явно вызвать исключение. Используется для обработки особых ситуаций или создания пользовательских исключений.",
    "example": "if x < 0:\n    raise ValueError('Число должно быть положительным')"
  },
  {
    "text": "Как объявить функцию в Python с помощью def?",
    "options": [
      "function my_func(): ...",
      "def my_func(): ...",
      "func my_func(): ...",
      "create my_func(): ..."
    ],
    "correct": 1,
    "explanation": "Функции объявляются ключевым словом def, за которым следует имя функции и круглые скобки с параметрами. Тело функции пишется с отступом.",
    "example": "def greet(name):\n    return f'Привет, {name}!'"
  },
  {
    "text": "Какие существуют типы аргументов в Python? Что такое аргументы по умолчанию, *args и **kwargs?",
    "options": [
      "Только позиционные и именованные",
      "Позиционные, именованные, *args для списков, **kwargs для словарей",
      "Обязательные, по умолчанию, *args для произвольного числа позиционных, **kwargs для произвольных именованных",
      "Только *args и **kwargs"
    ],
    "correct": 2,
    "explanation": "Типы аргументов: обязательные, по умолчанию (со значением), *args (произвольное число позиционных), **kwargs (произвольные именованные).",
    "example": "def func(a, b=2, *args, **kwargs):\n    print(a, b, args, kwargs)\nfunc(1, 3, 4, 5, x=6)  # 1 3 (4, 5) {'x': 6}"
  },
  {
    "text": "Чем отличается позиционный аргумент от ключевого?",
    "options": [
      "Позиционные передаются по имени, ключевые - по порядку",
      "Ключевые передаются через =, позиционные - по порядку",
      "Нет различий",
      "Ключевые аргументы быстрее"
    ],
    "correct": 1,
    "explanation": "Позиционные аргументы передаются по порядку, ключевые - по имени через =. Ключевые аргументы должны следовать после позиционных.",
    "example": "def func(a, b):\n    return a + b\nfunc(1, 2)  # Позиционные\nfunc(a=1, b=2)  # Ключевые"
  },
  {
    "text": "Как вернуть несколько значений из функции в Python?",
    "options": [
      "Через массив",
      "Через словарь",
      "Через кортеж (можно без скобок)",
      "Нельзя вернуть несколько значений"
    ],
    "correct": 2,
    "explanation": "Функция может вернуть несколько значений через кортеж. Фактически возвращается один кортеж, который можно распаковать в переменные.",
    "example": "def get_user():\n    return 'Alice', 30\nname, age = get_user()"
  }
]