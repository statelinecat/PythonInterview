[
  {
    "text": "Что такое класс и объект в Python? Приведи пример их использования.",
    "options": [
      "Класс - это функция, объект - её вызов",
      "Класс - шаблон для создания объектов, объект - экземпляр класса",
      "Класс и объект - это одно и то же",
      "Объект - это модуль, класс - его атрибут"
    ],
    "correct": 1,
    "explanation": "Класс - это шаблон для создания объектов, определяющий их структуру и поведение. Объект - конкретный экземпляр класса с собственным состоянием.",
    "example": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\nmy_dog = Dog('Rex')  # Создание объекта"
  },
  {
    "text": "Как в Python реализуется наследование и полиморфизм?",
    "options": [
      "Через ключевое слово extends",
      "Указанием родительского класса в скобках при объявлении",
      "Только через миксины",
      "Наследование не поддерживается"
    ],
    "correct": 1,
    "explanation": "Наследование: класс-потомок указывается в скобках при объявлении. Полиморфизм: переопределение методов родителя в потомке с той же сигнатурой.",
    "example": "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Гав!'\n\nclass Cat(Animal):\n    def speak(self):\n        return 'Мяу!'"
  },
  {
    "text": "Что такое инкапсуляция и как она реализована в Python?",
    "options": [
      "Полное сокрытие реализации",
      "Условное сокрытие через соглашение об именах (_prefix)",
      "Только через специальные декораторы",
      "Не поддерживается в Python"
    ],
    "correct": 1,
    "explanation": "В Python инкапсуляция реализована через соглашение: атрибуты с одним _ в начале считаются protected, с двумя __ - private (но это лишь соглашение, доступ остаётся).",
    "example": "class BankAccount:\n    def __init__(self):\n        self._balance = 0  # protected\n        self.__pin = '1234'  # private"
  },
  {
    "text": "В чем разница между атрибутами класса и экземпляра?",
    "options": [
      "Атрибуты класса общие для всех экземпляров, экземпляра - индивидуальные",
      "Нет различий",
      "Атрибуты экземпляра доступны только из методов класса",
      "Атрибуты класса нельзя изменять"
    ],
    "correct": 0,
    "explanation": "Атрибуты класса разделяются всеми экземплярами, атрибуты экземпляра принадлежат конкретному объекту. Атрибуты класса определяются вне методов.",
    "example": "class Dog:\n    species = 'Canis'  # Атрибут класса\n    \n    def __init__(self, name):\n        self.name = name  # Атрибут экземпляра"
  },
  {
    "text": "Как в Python реализовать метод, который будет доступен для всех экземпляров класса?",
    "options": [
      "Создать функцию вне класса",
      "Использовать декоратор @staticmethod",
      "Объявить метод внутри класса без self",
      "Создать метод экземпляра (обычный метод класса)"
    ],
    "correct": 3,
    "explanation": "Обычные методы класса (первый параметр self) доступны всем экземплярам. @classmethod и @staticmethod - специальные виды методов.",
    "example": "class MyClass:\n    def regular_method(self):\n        return 'Это метод экземпляра'"
  },
  {
    "text": "Что такое self в методах класса?",
    "options": [
      "Ссылка на родительский класс",
      "Ссылка на экземпляр класса",
      "Зарезервированное слово для наследования",
      "Указатель на модуль"
    ],
    "correct": 1,
    "explanation": "self - это ссылка на текущий экземпляр класса. Через self метод получает доступ к атрибутам и другим методам экземпляра.",
    "example": "class Dog:\n    def __init__(self, name):\n        self.name = name  # self ссылается на создаваемый объект"
  },
  {
    "text": "Объясните принцип работы перегрузки методов в Python.",
    "options": [
      "Полная поддержка как в C++",
      "Частичная поддержка через аргументы по умолчанию",
      "Только через декораторы",
      "Перегрузка невозможна"
    ],
    "correct": 1,
    "explanation": "Python не поддерживает перегрузку методов в классическом понимании. Вместо этого используются аргументы по умолчанию, *args и **kwargs.",
    "example": "class Calculator:\n    def add(self, a, b=0):\n        return a + b\n\ncalc = Calculator()\ncalc.add(2)    # 2\ncalc.add(2, 3) # 5"
  },
  {
    "text": "Что такое базы данных, и как Python может взаимодействовать с ними?",
    "options": [
      "Только через ORM системы",
      "Через специальные модули (sqlite3, psycopg2, SQLAlchemy)",
      "Только через веб-API",
      "Не может взаимодействовать"
    ],
    "correct": 1,
    "explanation": "Python взаимодействует с БД через: 1) DB-API модули (sqlite3), 2) ORM (SQLAlchemy), 3) драйверы для конкретных СУБД (psycopg2 для PostgreSQL).",
    "example": "import sqlite3\nconn = sqlite3.connect('example.db')"
  },
  {
    "text": "Как создать подключение к базе данных с помощью библиотеки sqlite3 в Python?",
    "options": [
      "Через функцию create_database()",
      "Используя sqlite3.connect()",
      "Через SQLAlchemy только",
      "Автоматически при первом запросе"
    ],
    "correct": 1,
    "explanation": "Подключение создаётся функцией connect(). Для работы нужно: 1) импортировать модуль, 2) создать соединение, 3) создать курсор.",
    "example": "import sqlite3\nconn = sqlite3.connect('mydb.db')\ncursor = conn.cursor()"
  },
  {
    "text": "Что такое SQL-запрос и какие основные операторы существуют в SQL?",
    "options": [
      "Только SELECT для чтения данных",
      "Команды для работы с БД: SELECT, INSERT, UPDATE, DELETE",
      "Только для создания таблиц",
      "Аналог функций в Python"
    ],
    "correct": 1,
    "explanation": "Основные SQL-операторы: SELECT (чтение), INSERT (добавление), UPDATE (изменение), DELETE (удаление), CREATE (создание объектов БД).",
    "example": "SELECT * FROM users;\nINSERT INTO users VALUES (1, 'Alice');\nUPDATE users SET name = 'Bob' WHERE id = 1;"
  }
]