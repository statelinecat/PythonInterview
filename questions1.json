[
  {
    "id": 1,
    "text": "Что такое переменная в Python, и как её правильно объявлять?",
    "options": [
      "Константное значение (объявляется через const)",
      "Именованная ссылка на объект (name = value)",
      "Тип данных (variable: type)",
      "Функция (def variable())"
    ],
    "correct": 1,
    "explanation": "Переменная в Python - именованная ссылка на объект. Объявляется присваиванием: имя = значение. Тип указывать не нужно.",
    "example": "x = 10\nname = 'Alice'",
    "category": "Основы",
    "difficulty": 1
  },
  {
    "id": 2,
    "text": "В чем различие между списками, кортежами и множествами?",
    "options": [
      "Списки изменяемы, кортежи неизменяемы, множества - уникальные элементы",
      "Все три типа одинаковы",
      "Кортежи быстрее списков",
      "Множества могут содержать только числа"
    ],
    "correct": 0,
    "explanation": "Списки ([]) - изменяемые, кортежи (()) - неизменяемые, множества ({}) - неупорядоченные с уникальными элементами.",
    "example": "lst = [1, 2]\ntpl = (1, 2)\nst = {1, 2}",
    "category": "Типы данных",
    "difficulty": 2
  },
  {
    "id": 3,
    "text": "Что такое immutable и mutable объекты?",
    "options": [
      "Immutable можно изменить, mutable нельзя",
      "Immutable нельзя изменить, mutable можно",
      "Оба типа изменяемы",
      "Это декораторы классов"
    ],
    "correct": 1,
    "explanation": "Immutable (числа, строки, кортежи) нельзя изменить после создания. Mutable (списки, словари) можно изменять.",
    "example": "s = 'hello'\ns[0] = 'H'  # Ошибка\nlst = [1,2]\nlst[0] = 10  # OK",
    "category": "Основы",
    "difficulty": 2
  },
  {
    "id": 4,
    "text": "Как работает оператор присваивания (=) в Python?",
    "options": [
      "Копирует значение",
      "Создает ссылку на объект",
      "Удаляет старое значение",
      "Работает только для чисел"
    ],
    "correct": 1,
    "explanation": "Оператор = создает ссылку на объект. Несколько переменных могут ссылаться на один объект.",
    "example": "a = [1,2]\nb = a\nb.append(3)\nprint(a)  # [1,2,3]",
    "category": "Основы",
    "difficulty": 2
  },
  {
    "id": 5,
    "text": "Что такое глобальные и локальные переменные?",
    "options": [
      "Глобальные видны везде, локальные - только в функции",
      "Локальные видны везде, глобальные - только в модуле",
      "Это синонимы",
      "Глобальные работают быстрее"
    ],
    "correct": 0,
    "explanation": "Глобальные переменные объявляются вне функций и видны во всем коде. Локальные - внутри функций.",
    "example": "x = 10  # Глобальная\ndef foo():\n    y = 20  # Локальная",
    "category": "Функции",
    "difficulty": 2
  },
  {
    "id": 6,
    "text": "Чем отличается = от == в Python?",
    "options": [
      "= присваивает, == сравнивает",
      "== присваивает, = сравнивает",
      "Нет различий",
      "= работает только с числами"
    ],
    "correct": 0,
    "explanation": "= - оператор присваивания, == - оператор сравнения на равенство.",
    "example": "x = 5  # Присваивание\nif x == 5:  # Сравнение",
    "category": "Основы",
    "difficulty": 1
  },
  {
    "id": 7,
    "text": "Что такое строковые литералы?",
    "options": [
      "Числовые константы",
      "Готовые строковые значения в коде",
      "Специальные комментарии",
      "Имена переменных"
    ],
    "correct": 1,
    "explanation": "Строковые литералы - строки, записанные непосредственно в коде (в кавычках).",
    "example": "\"Привет\"  # Литерал\nname = input()  # Не литерал",
    "category": "Строки",
    "difficulty": 1
  },
  {
    "id": 8,
    "text": "Какие основные типы данных в Python?",
    "options": [
      "int, float, str, list, dict, tuple, set, bool",
      "Только числа и строки",
      "var, let, const",
      "string, number, array"
    ],
    "correct": 0,
    "explanation": "Основные встроенные типы: целые/вещественные числа, строки, списки, словари, кортежи, множества, булевы значения.",
    "example": "num = 10\ntext = 'hello'\nlst = [1,2,3]",
    "category": "Типы данных",
    "difficulty": 1
  },
  {
    "id": 9,
    "text": "Как работают индексы в строках и списках?",
    "options": [
      "Индексы начинаются с 1",
      "Отрицательные индексы считают с конца",
      "Нельзя использовать отрицательные индексы",
      "Индексы только для списков"
    ],
    "correct": 1,
    "explanation": "Индексация начинается с 0. Отрицательные индексы (-1, -2) обращаются к элементам с конца.",
    "example": "s = 'abc'\nprint(s[-1])  # 'c'",
    "category": "Типы данных",
    "difficulty": 1
  },
  {
    "id": 10,
    "text": "Чем отличается del от remove для списков?",
    "options": [
      "del удаляет по индексу, remove - по значению",
      "remove удаляет по индексу, del - по значению",
      "Нет различий",
      "del работает только для кортежей"
    ],
    "correct": 0,
    "explanation": "del удаляет элемент по индексу (del lst[0]), remove удаляет первое вхождение значения (lst.remove('a')).",
    "example": "lst = [1,2,3]\ndel lst[0]  # [2,3]\nlst.remove(2)  # [3]",
    "category": "Списки",
    "difficulty": 2
  }

]