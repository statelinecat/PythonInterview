[
  {
    "text": "Как работает механизм декораторов в Python?",
    "options": [
      "Декораторы заменяют функцию на новую с дополнительным функционалом",
      "Декораторы изменяют исходный код функции",
      "Декораторы работают только с классами",
      "Декораторы — это встроенные функции Python"
    ],
    "correct": 0,
    "explanation": "Декораторы в Python — это функции, которые принимают другую функцию в качестве аргумента и возвращают новую функцию с добавленным или измененным поведением. Они не изменяют исходный код функции напрямую.",
    "example": "def my_decorator(func):\n    def wrapper():\n        print('До вызова функции')\n        func()\n        print('После вызова функции')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Hello!')\n\nsay_hello()"
  },
  {
    "text": "Что такое контекстные менеджеры (context managers) в Python и как их использовать?",
    "options": [
      "Они управляют потоками выполнения программы",
      "Они обеспечивают корректное управление ресурсами (например, файлами)",
      "Они используются только для многопоточности",
      "Это альтернатива декораторам"
    ],
    "correct": 1,
    "explanation": "Контекстные менеджеры в Python позволяют управлять ресурсами, такими как файлы, соединения с базой данных и т.д., гарантируя их корректное открытие и закрытие. Их можно создавать с помощью оператора `with` или класса с методами `__enter__` и `__exit__`.",
    "example": "# Использование контекстного менеджера для работы с файлами\nwith open('file.txt', 'r') as file:\n    content = file.read()\n\n# Создание собственного контекстного менеджера\nclass MyContextManager:\n    def __enter__(self):\n        print('Вход в контекст')\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Выход из контекста')\n\nwith MyContextManager() as manager:\n    print('Внутри контекста')"
  },
  {
    "text": "Какие основные различия между списками (list) и кортежами (tuple) в Python?",
    "options": [
      "Списки изменяемые, а кортежи нет",
      "Кортежи занимают больше памяти",
      "Списки поддерживают только числа",
      "Кортежи могут содержать только строки"
    ],
    "correct": 0,
    "explanation": "Списки (list) в Python являются изменяемыми, то есть их элементы можно добавлять, удалять или изменять. Кортежи (tuple) неизменяемы, и после создания их содержимое нельзя изменить.",
    "example": "# Пример списка\nmy_list = [1, 2, 3]\nmy_list[0] = 10  # Изменение элемента\n\n# Пример кортежа\nmy_tuple = (1, 2, 3)\n# my_tuple[0] = 10  # Вызовет ошибку TypeError"
  },
  {
    "text": "Что такое генераторы в Python и как они работают?",
    "options": [
      "Генераторы — это функции, которые возвращают итераторы",
      "Генераторы — это альтернатива спискам",
      "Генераторы работают только с числами",
      "Генераторы заменяют циклы"
    ],
    "correct": 0,
    "explanation": "Генераторы в Python — это функции, которые используют ключевое слово `yield` для возврата значения и приостановки своего выполнения. Они позволяют лениво (lazy) генерировать значения по одному, что экономит память.",
    "example": "def my_generator():\n    yield 1\n    yield 2\n    yield 3\n\n# Использование генератора\nfor value in my_generator():\n    print(value)\n\n# Также можно создать генератор с помощью выражения\ngen = (x * x for x in range(5))\nfor value in gen:\n    print(value)"
  }
]