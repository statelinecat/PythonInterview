[
  {
    "text": "Что такое список (list) в Python, и как добавить элементы в список?",
    "options": [
      "Неизменяемая коллекция, элементы добавляются через +=",
      "Изменяемая упорядоченная коллекция, элементы добавляются методом append()",
      "Коллекция без порядка элементов, добавляется через insert()",
      "Только для числовых данных, добавляется через add()"
    ],
    "correct": 1,
    "explanation": "Список (list) - это изменяемая упорядоченная коллекция. Элементы добавляются методами append() (в конец), insert() (по индексу) или extend() (добавление нескольких элементов).",
    "example": "my_list = [1, 2]\nmy_list.append(3)  # [1, 2, 3]\nmy_list.insert(0, 0)  # [0, 1, 2, 3]"
  },
  {
    "text": "Как инициализировать пустой словарь в Python? Как добавить и удалить элементы?",
    "options": [
      "dict = {}; dict.add(key, value); dict.remove(key)",
      "dict = dict(); dict[key] = value; del dict[key]",
      "dict = []; dict[key] = value; dict.pop(key)",
      "dict = (); dict.insert(key, value); dict.delete(key)"
    ],
    "correct": 1,
    "explanation": "Пустой словарь создается через {} или dict(). Элементы добавляются через dict[key] = value и удаляются через del dict[key] или dict.pop(key).",
    "example": "d = {}\nd['name'] = 'Alice'  # {'name': 'Alice'}\ndel d['name']  # {}"
  },
  {
    "text": "Что такое множество (set) и как оно работает в Python?",
    "options": [
      "Упорядоченная коллекция с дубликатами",
      "Неупорядоченная коллекция уникальных элементов",
      "Только для числовых значений",
      "Аналог списка, но быстрее"
    ],
    "correct": 1,
    "explanation": "Множество (set) - неупорядоченная коллекция уникальных элементов. Создается через {} или set(). Поддерживает операции объединения, пересечения и др.",
    "example": "s = {1, 2, 2, 3}  # {1, 2, 3}\ns.add(4)  # {1, 2, 3, 4}"
  },
  {
    "text": "Как инициализировать пустой кортеж, и чем он отличается от списка?",
    "options": [
      "t = (); кортеж изменяем, список нет",
      "t = tuple(); кортеж быстрее, но занимает больше памяти",
      "t = []; кортеж для разнотипных данных",
      "t = (); кортеж неизменяем, список изменяем"
    ],
    "correct": 3,
    "explanation": "Пустой кортеж создается как t = (). Главное отличие: кортежи неизменяемы (после создания нельзя изменить элементы), а списки изменяемы.",
    "example": "t = (1, 2)\nt[0] = 10  # Ошибка!\nlst = [1, 2]\nlst[0] = 10  # OK"
  },
  {
    "text": "Как можно объединить два списка в Python?",
    "options": [
      "Через метод merge()",
      "Оператором + или методом extend()",
      "Функцией combine()",
      "Через оператор |"
    ],
    "correct": 1,
    "explanation": "Списки объединяются оператором + (создает новый список) или методом extend() (добавляет элементы в существующий список).",
    "example": "a = [1, 2]\nb = [3, 4]\nc = a + b  # [1, 2, 3, 4]\na.extend(b)  # a = [1, 2, 3, 4]"
  },
  {
    "text": "Что делает оператор in и как его можно использовать с коллекциями?",
    "options": [
      "Проверяет тип элемента",
      "Проверяет наличие элемента в коллекции",
      "Добавляет элемент в коллекцию",
      "Удаляет элемент из коллекции"
    ],
    "correct": 1,
    "explanation": "Оператор in проверяет наличие элемента в коллекции (списке, кортеже, множестве, словаре). Возвращает True/False.",
    "example": "lst = [1, 2, 3]\nprint(2 in lst)  # True\nd = {'a': 1}\nprint('a' in d)  # True"
  },
  {
    "text": "Как работает цикл for в Python? Приведи пример использования с коллекцией.",
    "options": [
      "Только с числовыми диапазонами через range()",
      "Итерируется по элементам любой коллекции",
      "Только со списками и кортежами",
      "Требует предварительного объявления счетчика"
    ],
    "correct": 1,
    "explanation": "Цикл for в Python итерируется по элементам любой итерируемой коллекции (списки, кортежи, строки, словари, множества).",
    "example": "fruits = ['apple', 'banana']\nfor fruit in fruits:\n    print(fruit)\n# apple\n# banana"
  },
  {
    "text": "Объясните разницу между for и while циклами в Python.",
    "options": [
      "for работает пока условие True, while - по коллекциям",
      "for для конечных коллекций, while - пока условие истинно",
      "while быстрее, чем for",
      "Нет различий, можно использовать любые"
    ],
    "correct": 1,
    "explanation": "for используется для итерации по готовым коллекциям, while выполняется пока условие истинно. for обычно предпочтительнее, когда известно количество итераций.",
    "example": "# for\nfor i in range(3):\n    print(i)\n\n# while\ni = 0\nwhile i < 3:\n    print(i)\n    i += 1"
  },
  {
    "text": "Как работает метод enumerate() в Python?",
    "options": [
      "Преобразует коллекцию в словарь",
      "Удаляет дубликаты из коллекции",
      "Возвращает пары (индекс, элемент) для итерации",
      "Сортирует элементы коллекции"
    ],
    "correct": 2,
    "explanation": "enumerate() добавляет счетчик к итерируемому объекту и возвращает enumerate object, который можно использовать в циклах for для получения пар (индекс, элемент).",
    "example": "fruits = ['apple', 'banana']\nfor idx, fruit in enumerate(fruits):\n    print(f\"{idx}: {fruit}\")\n# 0: apple\n# 1: banana"
  }
]