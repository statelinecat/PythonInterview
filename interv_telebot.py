import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from app import app, db, Question, GameHistory  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Question –∏ GameHistory
import random
import html  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
from datetime import datetime, UTC  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UTC –¥–ª—è timezone-aware –≤—Ä–µ–º–µ–Ω–∏
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()         # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    try:
        with app.app_context():
            all_questions = Question.query.all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
        return

    if len(all_questions) < 10:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return

    selected_questions = random.sample(all_questions, 10)
    user_states[user_id] = {
        "questions": selected_questions,
        "current_index": 0,
        "score": 0,
        "username": username
    }

    await update.message.reply_text("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.", parse_mode="HTML")
    await show_question(update, context)

# –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def show_question(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)

    if not state or state["current_index"] >= len(state["questions"]):
        await end_quiz(update, context)
        return

    question = state["questions"][state["current_index"]]
    options = [question.option1, question.option2, question.option3, question.option4]

    reply_markup = ReplyKeyboardMarkup(
        [[option] for option in options],
        one_time_keyboard=True,
        resize_keyboard=True
    )

    escaped_text = html.escape(question.text)

    await update.message.reply_text(
        f"<b>–í–æ–ø—Ä–æ—Å #{state['current_index'] + 1}:</b>\n{escaped_text}",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)

    if not state:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (/start).")
        return

    user_answer = update.message.text
    current_question = state["questions"][state["current_index"]]

    correct_option = current_question.correct_option
    options = [current_question.option1, current_question.option2, current_question.option3, current_question.option4]
    is_correct = user_answer == options[correct_option - 1]

    result_message = "<b>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>" if is_correct else "<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>"
    explanation = html.escape(current_question.explanation)
    example = html.escape(current_question.example or "–ü—Ä–∏–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    if is_correct:
        state["score"] += 1

    await update.message.reply_text(
        f"{result_message}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{html.escape(options[correct_option - 1])}</code>\n"
        f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}\n"
        f"–ü—Ä–∏–º–µ—Ä: <pre>{example}</pre>",
        parse_mode="HTML"
    )

    state["current_index"] += 1
    await show_question(update, context)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def end_quiz(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    state = user_states.pop(user_id, None)

    if not state:
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É (/start).")
        return

    score = state["score"]
    total_questions = len(state["questions"])
    username = state["username"]

    save_game_history(username, score, total_questions)

    await update.message.reply_text(
        f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <code>{score}/{total_questions}</code>\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (/start).",
        parse_mode="HTML"
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_game_history(username, score, total_questions):
    with app.app_context():
        history = GameHistory(
            username=username,
            score=score,
            total_questions=total_questions,
            date=datetime.now(UTC)  # Timezone-aware –≤—Ä–µ–º—è
        )
        db.session.add(history)
        db.session.commit()

# –ö–æ–º–∞–Ω–¥–∞ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
async def history(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    with app.app_context():
        user_history = GameHistory.query.filter_by(username=username).order_by(GameHistory.date.desc()).all()

    if not user_history:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É (/start).")
        return

    best_score = max(entry.score for entry in user_history)
    total_games = len(user_history)

    history_message = f"<b>üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä:</b>\n"
    history_message += f"–í—Å–µ–≥–æ –∏–≥—Ä: <code>{total_games}</code>\n"
    history_message += f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <code>{best_score}</code>\n\n"

    for entry in user_history:
        escaped_date = html.escape(entry.date.strftime('%Y-%m-%d %H:%M'))
        escaped_result = html.escape(f"{entry.score}/{entry.total_questions}")

        history_message += (
            f"–î–∞—Ç–∞: <code>{escaped_date}</code>\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{escaped_result}</code>\n"
            f"{'-' * 20}\n"
        )

    await update.message.reply_text(history_message, parse_mode="HTML")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    application.run_polling()

if __name__ == "__main__":
    main()