[
  {
    "text": "Что такое lambda-функции?",
    "options": [
      "Именованные функции с ключевым словом def",
      "Анонимные функции, определяемые через lambda",
      "Функции для работы с числами λ",
      "Специальные системные функции"
    ],
    "correct": 1,
    "explanation": "Lambda-функции - это анонимные функции, определяемые через ключевое слово lambda. Они могут принимать любое количество аргументов, но содержат только одно выражение.",
    "example": "square = lambda x: x**2\nprint(square(5))  # 25"
  },
  {
    "text": "Как работает функция map() в Python?",
    "options": [
      "Создает словарь из пар ключ-значение",
      "Применяет функцию к каждому элементу итерируемого объекта",
      "Изменяет структуру списка",
      "Фильтрует элементы по условию"
    ],
    "correct": 1,
    "explanation": "Функция map() применяет указанную функцию к каждому элементу итерируемого объекта (списка, кортежа и т.д.) и возвращает итератор с результатами.",
    "example": "numbers = [1, 2, 3]\nsquared = map(lambda x: x**2, numbers)\nprint(list(squared))  # [1, 4, 9]"
  },
  {
    "text": "Объясните, как работает декоратор в Python.",
    "options": [
      "Изменяет исходный код функции",
      "Функция, которая принимает функцию и возвращает новую функцию",
      "Специальный синтаксис для классов",
      "Инструмент для оптимизации скорости выполнения"
    ],
    "correct": 1,
    "explanation": "Декоратор - это функция, которая принимает другую функцию и расширяет её поведение, не изменяя исходный код. Используется с синтаксисом @decorator.",
    "example": "def my_decorator(func):\n    def wrapper():\n        print('До функции')\n        func()\n        print('После функции')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Привет!')\n\nsay_hello()"
  },
  {
    "text": "Что такое замыкания (closures) в Python?",
    "options": [
      "Способ закрытия файлов",
      "Функции, которые запоминают значения из enclosing scope",
      "Метод завершения работы программы",
      "Специальные скобки в коде"
    ],
    "correct": 1,
    "explanation": "Замыкание - это функция, которая запоминает значения из enclosing scope, даже когда это scope больше не существует. Позволяет сохранять состояние между вызовами.",
    "example": "def outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nadd_five = outer(5)\nprint(add_five(3))  # 8"
  },
  {
    "text": "Как импортировать модуль в Python?",
    "options": [
      "Через команду include",
      "Используя ключевое слово import",
      "Через функцию load_module()",
      "Автоматически при первом использовании"
    ],
    "correct": 1,
    "explanation": "Модули импортируются с помощью ключевого слова import. Можно импортировать весь модуль или конкретные объекты из него.",
    "example": "import math\nfrom datetime import datetime"
  },
  {
    "text": "Чем отличается импорт через import и from ... import?",
    "options": [
      "import импортирует все, from ... import - только указанные имена",
      "Нет различий",
      "from ... import работает быстрее",
      "import только для стандартных библиотек"
    ],
    "correct": 0,
    "explanation": "import module импортирует весь модуль, и к объектам нужно обращаться через module.object. from module import object импортирует конкретные имена в текущее пространство имен.",
    "example": "import math\nprint(math.sqrt(4))  # 2.0\n\nfrom math import sqrt\nprint(sqrt(4))  # 2.0"
  },
  {
    "text": "Что такое виртуальные окружения в Python, и зачем они нужны?",
    "options": [
      "Изолированные среды для разных проектов",
      "Виртуальные машины для Python",
      "Графические окружения для разработки",
      "Специальные версии интерпретатора"
    ],
    "correct": 0,
    "explanation": "Виртуальные окружения создают изолированные среды для проектов, позволяя иметь разные версии пакетов для разных проектов. Решают проблему конфликтов зависимостей.",
    "example": "python -m venv myenv  # Создание окружения\nsource myenv/bin/activate  # Активация (Linux/Mac)\nmyenv\\Scripts\\activate  # Активация (Windows)"
  },
  {
    "text": "Как создать и использовать свой модуль в Python?",
    "options": [
      "Создать файл .py и импортировать его",
      "Только через установку пакета с pip",
      "Требуется компиляция в .dll",
      "Нельзя создать свой модуль"
    ],
    "correct": 0,
    "explanation": "Любой файл .py может быть модулем. Достаточно создать файл с функциями/классами и импортировать его в другой файл. Файл должен находиться в директории проекта или в PYTHONPATH.",
    "example": "# mymodule.py\ndef hello():\n    print('Привет!')\n\n# main.py\nimport mymodule\nmymodule.hello()"
  },
  {
    "text": "Что такое библиотека math и какие функции в ней есть?",
    "options": [
      "Только основные арифметические операции",
      "Математические функции: sqrt, sin, cos, log и др.",
      "Функции для работы с датами",
      "Инструменты для машинного обучения"
    ],
    "correct": 1,
    "explanation": "Модуль math предоставляет математические функции: тригонометрические (sin, cos), логарифмы (log), корни (sqrt), константы (pi, e) и другие.",
    "example": "import math\nprint(math.sqrt(16))  # 4.0\nprint(math.sin(math.pi/2))  # 1.0"
  },
  {
    "text": "Как использовать модуль random в Python для генерации случайных чисел?",
    "options": [
      "Только для целых чисел",
      "Через функции randint, random, choice и др.",
      "Требуется настройка seed перед каждым использованием",
      "Генерирует только псевдослучайные последовательности"
    ],
    "correct": 1,
    "explanation": "Модуль random предоставляет функции для генерации случайных чисел: randint(a, b) - целое в диапазоне, random() - float от 0 до 1, choice(seq) - случайный элемент последовательности.",
    "example": "import random\nprint(random.randint(1, 10))  # Случайное целое 1-10\nprint(random.choice(['a', 'b', 'c']))  # Случайный элемент"
  }
]